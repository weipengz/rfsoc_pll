/*
  // single loop test mode 12.288 MHz reference 256 MHz outputs
  u32 LMK_ARRAY[] = {
    0x000090, 0x000010, 0x000200, 0x000306, 0x0004D1, 0x000563, 0x000650, 0x000C51,
    0x000D04, 0x01000C, 0x01010A, 0x010260, 0x010340, 0x010420, 0x010500, 0x010601,
    0x0107F6, 0x01080C, 0x01090A, 0x010A60, 0x010B40, 0x010C20, 0x010D00, 0x010E01,
    0x010FC6, 0x01100C, 0x01110A, 0x011260, 0x011340, 0x011400, 0x011500, 0x011601,
    0x011706, 0x01180C, 0x01190A, 0x011A60, 0x011B40, 0x011C10, 0x011D00, 0x011E01,
    0x011F06, 0x01200C, 0x01210A, 0x012260, 0x012340, 0x012410, 0x012500, 0x012601,
    0x012706, 0x01280C, 0x01290A, 0x012A60, 0x012B70, 0x012C00, 0x012D00, 0x012E01,
    0x012F06, 0x01300C, 0x01310A, 0x013260, 0x013360, 0x013400, 0x013500, 0x013601,
    0x013766, 0x013825, 0x013902, 0x013A0B, 0x013BB8, 0x013C00, 0x013D08, 0x013E03,
    0x013F84, 0x014090, 0x014100, 0x014200, 0x014313, 0x014400, 0x014500, 0x014610,
    0x01471A, 0x014802, 0x014942, 0x014A03, 0x014B06, 0x014C00, 0x014D00, 0x014EC0,
    0x014F7F, 0x015001, 0x015102, 0x015200, 0x015300, 0x01547D, 0x015500, 0x015678,
    0x015706, 0x015800, 0x015906, 0x015A00, 0x015BD4, 0x015C20, 0x015D00, 0x015E1E,
    0x015F0B, 0x016000, 0x016130, 0x01626C, 0x016300, 0x016400, 0x016501, 0x016958,
    0x016A20, 0x016B00, 0x016C00, 0x016D00, 0x016E13, 0x017310, 0x017700, 0x018200,
    0x018300, 0x016600, 0x01670F, 0x0168A0, 0x055500
  };

*/
/*
  // single loop input 19.8 MHz reference 255.75 MHz outputs
  u32 LMK_ARRAY[] = {
    0x000090, 0x000010, 0x000200, 0x000306, 0x0004D1, 0x000563, 0x000650, 0x000C51,
    0x000D04, 0x01000C, 0x01010A, 0x010260, 0x010340, 0x010420, 0x010500, 0x010601,
    0x0107F6, 0x01080C, 0x01090A, 0x010A60, 0x010B40, 0x010C20, 0x010D00, 0x010E01,
    0x010FC6, 0x01100C, 0x01110A, 0x011260, 0x011340, 0x011400, 0x011500, 0x011601,
    0x011706, 0x01180C, 0x01190A, 0x011A60, 0x011B40, 0x011C10, 0x011D00, 0x011E01,
    0x011F06, 0x01200C, 0x01210A, 0x012260, 0x012340, 0x012410, 0x012500, 0x012601,
    0x012706, 0x01280C, 0x01290A, 0x012A60, 0x012B70, 0x012C00, 0x012D00, 0x012E01,
    0x012F06, 0x01300C, 0x01310A, 0x013260, 0x013360, 0x013400, 0x013500, 0x013601,
    0x013766, 0x013825, 0x013902, 0x013A0B, 0x013BB8, 0x013C00, 0x013D08, 0x013E03,
    0x013F84, 0x014090, 0x014100, 0x014200, 0x014313, 0x014400, 0x014500, 0x014610,
    0x01471A, 0x014802, 0x014942, 0x014A03, 0x014B06, 0x014C00, 0x014D00, 0x014EC0,
    0x014F7F, 0x015001, 0x015102, 0x015200, 0x015300, 0x01547D, 0x015500, 0x015678,
    0x015706, 0x015800, 0x015906, 0x015A00, 0x015BD4, 0x015C20, 0x015D00, 0x015E1E,
    0x015F0B, 0x016000, 0x016101, 0x0162AC, 0x016300, 0x016400, 0x016501, 0x016958,
    0x016A20, 0x016B00, 0x016C00, 0x016D00, 0x016E13, 0x017310, 0x017700, 0x018200,
    0x018300, 0x016600, 0x016700, 0x01681F, 0x055500
  };
*/

/*
  // single loop input 19.8 MHz reference 255.75 MHz HSDS voltage outputs (MyLMKTest_255_75_hsds.txt)
  uint32_t LMK_ARRAY[] = {
    0x000090, 0x000010, 0x000200, 0x000306, 0x0004D1, 0x000563, 0x000650, 0x000C51,
    0x000D04, 0x01000C, 0x01010A, 0x010260, 0x010340, 0x010420, 0x010500, 0x010601,
    0x0107F6, 0x01080C, 0x01090A, 0x010A60, 0x010B40, 0x010C20, 0x010D00, 0x010E01,
    0x010FC6, 0x01100C, 0x01110A, 0x011260, 0x011340, 0x011404, 0x011500, 0x011601,
    0x011703, 0x01180C, 0x01190A, 0x011A60, 0x011B40, 0x011C14, 0x011D00, 0x011E01,
    0x011F03, 0x01200C, 0x01210A, 0x012260, 0x012340, 0x012410, 0x012500, 0x012601,
    0x012706, 0x01280C, 0x01290A, 0x012A60, 0x012B70, 0x012C00, 0x012D00, 0x012E01,
    0x012F06, 0x01300C, 0x01310A, 0x013260, 0x013360, 0x013400, 0x013500, 0x013601,
    0x013736, 0x013825, 0x013902, 0x013A0B, 0x013BB8, 0x013C00, 0x013D08, 0x013E03,
    0x013F84, 0x014090, 0x014100, 0x014200, 0x014313, 0x014400, 0x014500, 0x014610,
    0x01471A, 0x014802, 0x014942, 0x014A03, 0x014B06, 0x014C00, 0x014D00, 0x014EC0,
    0x014F7F, 0x015001, 0x015102, 0x015200, 0x015300, 0x01547D, 0x015500, 0x015678,
    0x015706, 0x015800, 0x015906, 0x015A00, 0x015BD4, 0x015C20, 0x015D00, 0x015E1E,
    0x015F0B, 0x016000, 0x016101, 0x0162AC, 0x016300, 0x016400, 0x016501, 0x016958,
    0x016A20, 0x016B00, 0x016C00, 0x016D00, 0x016E13, 0x017310, 0x017700, 0x018200,
    0x018300, 0x016600, 0x016700, 0x01681F, 0x055500
  };
*/

  // for jack
  uint32_t LMK_ARRAY[] = {
    0x000090, 0x00241C, 0x020500, 0x030642, 0x040D43, 0x0500C8, 0x06C802, 0x0C5004,
    0x0D4000, 0x010019, 0x01010A, 0x010260, 0x010340, 0x010400, 0x010500, 0x010601,
    0x010766, 0x01080C, 0x01090A, 0x010AE0, 0x010B40, 0x010C20, 0x010D00, 0x010E01,
    0x010F00, 0x01100C, 0x01110A, 0x0112E0, 0x011340, 0x011400, 0x011500, 0x011601,
    0x011700, 0x01180C, 0x01190A, 0x011AE0, 0x011B40, 0x011C10, 0x011D00, 0x011E01,
    0x011F00, 0x012019, 0x01210A, 0x012260, 0x012340, 0x012400, 0x012500, 0x012601,
    0x012766, 0x012819, 0x01290A, 0x012A60, 0x012B50, 0x012C00, 0x012D00, 0x012E01,
    0x012F66, 0x013019, 0x01310A, 0x013260, 0x013340, 0x013400, 0x013500, 0x013601,
    0x013766, 0x013825, 0x013902, 0x013A0C, 0x013B38, 0x013C00, 0x013D08, 0x013E03,
    0x013F84, 0x014080, 0x014100, 0x014200, 0x014313, 0x014400, 0x014500, 0x014600,
    0x01471B, 0x014802, 0x014942, 0x014A03, 0x014B06, 0x014C00, 0x014D00, 0x014EC0,
    0x014F7F, 0x015001, 0x015102, 0x015200, 0x015300, 0x01547D, 0x015500, 0x015678,
    0x015706, 0x015800, 0x015906, 0x015A00, 0x015BD4, 0x015C20, 0x015D00, 0x015E1E,
    0x015F0B, 0x016000, 0x016101, 0x01624C, 0x016300, 0x016400, 0x016501, 0x016958,
    0x016A20, 0x016B00, 0x016C00, 0x016D00, 0x016E13, 0x017310, 0x017700, 0x018200,
    0x018300, 0x016600, 0x016700, 0x0168A0, 0x055500,
  };
/*
  // 255.75 MHz input 255.75 MHz output (MyLMXTest_255_75)
  u32 LMX_ARRAY[] = {
    // {assert rst, remove rst, 113 program registers, apply last register (R0) again}
    0x000002, 0x000000, 0x700000, 0x6F0000, 0x6E0000, 0x6D0000, 0x6C0000, 0x6B0000,
    0x6A0000, 0x690021, 0x680000, 0x670000, 0x660000, 0x650011, 0x640000, 0x630000,
    0x620000, 0x610888, 0x600000, 0x5F0000, 0x5E0000, 0x5D0000, 0x5C0000, 0x5B0000,
    0x5A0000, 0x590000, 0x580000, 0x570000, 0x560000, 0x550000, 0x540000, 0x530000,
    0x520000, 0x510000, 0x500000, 0x4F0000, 0x4E008B, 0x4D0000, 0x4C000C, 0x4B09C0,
    0x4A0000, 0x49003F, 0x480001, 0x470081, 0x46C350, 0x450000, 0x4403E8, 0x430000,
    0x4201F4, 0x410000, 0x401388, 0x3F0000, 0x3E0322, 0x3D00A8, 0x3C0000, 0x3B0001,
    0x3A9001, 0x390020, 0x380000, 0x370000, 0x360000, 0x350000, 0x340820, 0x330080,
    0x320000, 0x314180, 0x300300, 0x2F0300, 0x2E07FC, 0x2DC0DD, 0x2C1D23, 0x2B0000,
    0x2A0000, 0x290000, 0x280000, 0x271C80, 0x261652, 0x250304, 0x240040, 0x230004,
    0x220000, 0x211E21, 0x200393, 0x1F43EC, 0x1E318C, 0x1D318C, 0x1C0488, 0x1B0002,
    0x1A0DB0, 0x190C2B, 0x18071A, 0x17007C, 0x160001, 0x150401, 0x14C848, 0x1327B7,
    0x120064, 0x110106, 0x100080, 0x0F064F, 0x0E1E70, 0x0D4000, 0x0C5002, 0x0B0018,
    0x0A10D8, 0x090604, 0x082000, 0x0740B2, 0x06C802, 0x0500C8, 0x041943, 0x030642,
    0x020500, 0x010808, 0x00251C, 0x00251C
  };
*/

  // 255.75 MHz input, 255.75 MHz output (MyLMXTest_255_75_ver2) LMX output with change to "Pre R" register testing lock performance
  uint32_t LMX_ARRAY[] = {
    // {assert rst, remove rst, 113 program registers, apply last register (R0) again}
    0x000002, 0x000000, 0x700000, 0x6F0000, 0x6E0000, 0x6D0000, 0x6C0000, 0x6B0000,
    0x6A0000, 0x690021, 0x680000, 0x670000, 0x660000, 0x650011, 0x640000, 0x630000,
    0x620000, 0x610888, 0x600000, 0x5F0000, 0x5E0000, 0x5D0000, 0x5C0000, 0x5B0000,
    0x5A0000, 0x590000, 0x580000, 0x570000, 0x560000, 0x550000, 0x540000, 0x530000,
    0x520000, 0x510000, 0x500000, 0x4F0000, 0x4E008B, 0x4D0000, 0x4C000C, 0x4B09C0,
    0x4A0000, 0x49003F, 0x480001, 0x470081, 0x46C350, 0x450000, 0x4403E8, 0x430000,
    0x4201F4, 0x410000, 0x401388, 0x3F0000, 0x3E0322, 0x3D00A8, 0x3C0000, 0x3B0001,
    0x3A9001, 0x390020, 0x380000, 0x370000, 0x360000, 0x350000, 0x340820, 0x330080,
    0x320000, 0x314180, 0x300300, 0x2F0300, 0x2E07FC, 0x2DC0DD, 0x2C1D20, 0x2B0000,
    0x2A0000, 0x290000, 0x280000, 0x270001, 0x260000, 0x250104, 0x240180, 0x230004,
    0x220000, 0x211E21, 0x200393, 0x1F43EC, 0x1E318C, 0x1D318C, 0x1C0488, 0x1B0002,
    0x1A0DB0, 0x190C2B, 0x18071A, 0x17007C, 0x160001, 0x150401, 0x14C848, 0x1327B7,
    0x120064, 0x110106, 0x10012C, 0x0F064F, 0x0E1E40, 0x0D4000, 0x0C5004, 0x0B0038,
    0x0A10D8, 0x090604, 0x082000, 0x0740B2, 0x06C802, 0x0500C8, 0x040D43, 0x030642,
    0x020500, 0x010809, 0x00241C, 0x00241C
  };

